import os
import json
import asyncio
import threading
import http.server
import socketserver
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from dotenv import load_dotenv

# ==== –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ====
if os.path.exists(".env"):
    load_dotenv()
    print("[INFO] –§–∞–π–ª .env –∑–∞–≥—Ä—É–∂–µ–Ω")
else:
    print("[INFO] –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ADMIN_ID = os.getenv("ADMIN_ID")
ARTICLE_URL = os.getenv("ARTICLE_URL", "https://example.com")  # —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é

missing_vars = []
if not BOT_TOKEN:
    missing_vars.append("BOT_TOKEN")
if not CHANNEL_ID:
    missing_vars.append("CHANNEL_ID")
if not ADMIN_ID:
    missing_vars.append("ADMIN_ID")

if missing_vars:
    raise ValueError(f"[–û–®–ò–ë–ö–ê] –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")

ADMIN_ID = int(ADMIN_ID)

# ==== –§–µ–π–∫–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ====
def run_server():
    PORT = 10000
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print(f"[INFO] Fake web server running on port {PORT}")
        httpd.serve_forever()

threading.Thread(target=run_server, daemon=True).start()

# ==== –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ ====
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ==== –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ====
stats_file = "stats.json"
stats = {"users": {}}

def save_stats():
    try:
        with open(stats_file, "w", encoding="utf-8") as f:
            json.dump(stats["users"], f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–≤—Ç–æ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
if os.path.exists(stats_file):
    try:
        with open(stats_file, "r", encoding="utf-8") as f:
            loaded_data = json.load(f)

        save_needed = False
        if isinstance(loaded_data, list):
            print("[INFO] –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –≤—ã–ø–æ–ª–Ω—è—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
            today = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            stats["users"] = {
                str(uid): {"first_seen": today, "last_seen": today}
                for uid in loaded_data
            }
            save_needed = True
        elif isinstance(loaded_data, dict):
            stats["users"] = loaded_data
        else:
            print("[WARN] stats.json –∏–º–µ–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        print(f"[INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(stats['users'])}")

        if save_needed:
            save_stats()
            print("[INFO] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ñ–∞–π–ª stats.json –æ–±–Ω–æ–≤–ª—ë–Ω")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def update_user_stats(user_id: int):
    today = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if str(user_id) not in stats["users"]:
        stats["users"][str(user_id)] = {"first_seen": today, "last_seen": today}
    else:
        stats["users"][str(user_id)]["last_seen"] = today
    save_stats()

# ==== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ====
async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# ==== –•—ç–Ω–¥–ª–µ—Ä—ã ====
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    update_user_stats(message.from_user.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–∫—É —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    photo = FSInputFile("zlatapic.jpg")
    await message.answer_photo(
        photo,
        caption=(
            "–ü—Ä–∏–≤–µ—Ç–∏–∫! –°—Ç–∞—Ç—å—è —É–∂–µ –∂–¥—ë—Ç —Ç–µ–±—è! üí°\n"
            "–ë–æ—Ç –≤—ã—Å—ã–ª–∞–µ—Ç –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ, –ø–æ—ç—Ç–æ–º—É –∂–¥—É —Ç–æ–ª—å–∫–æ —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É.\n"
            "ENTER —Å –ª—é–±–æ–≤—å—é, kammmilüíã"
        )
    )

    if await is_subscribed(message.from_user.id):
        await send_article_ready(message.chat.id)
    else:
        await ask_to_subscribe(message.chat.id)

async def ask_to_subscribe(chat_id: int):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="check_subscribe")]
    ])
    await bot.send_message(chat_id, "–ù–µ –≤–∏–∂—É —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=kb)

async def send_article_ready(chat_id: int):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°—Ç–∞—Ç—å—è", url=ARTICLE_URL)]
    ])
    photo = FSInputFile("zlatapic1.jpg")
    await bot.send_photo(
        chat_id,
        photo,
        caption="–û—Ç–ª–∏—á–Ω–æ! –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–¥–ø–∏—Å–∫—Éü§ç",
        reply_markup=kb
    )

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ====
@dp.callback_query(F.data == "check_subscribe")
async def check_subscribe_callback(callback: types.CallbackQuery):
    if await is_subscribed(callback.from_user.id):
        try:
            await callback.message.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        except:
            pass
        await send_article_ready(callback.from_user.id)
    else:
        await ask_to_subscribe(callback.from_user.id)
    await callback.answer()

# ==== /stats ====
@dp.message(F.text == "/stats")
async def stats_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    total_users = len(stats["users"])
    last_users = list(stats["users"].items())[-10:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
    
    text = f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10:\n"
    for uid, dates in last_users:
        if isinstance(dates, dict):
            first_seen = dates.get("first_seen", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            last_seen = dates.get("last_seen", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        else:
            first_seen = last_seen = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            chat = await bot.get_chat(int(uid))
            name = chat.full_name
        except:
            name = "–ë–µ–∑ –∏–º–µ–Ω–∏"
        
        text += f"üë§ {name} (ID: {uid}) | –ø–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: {first_seen} | –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {last_seen}\n"

    await message.answer(text)

# ==== /debug ====
@dp.message(F.text == "/debug")
async def debug_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    await message.answer(
        f"<b>BOT_TOKEN:</b> {BOT_TOKEN if BOT_TOKEN else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n"
        f"<b>CHANNEL_ID:</b> {CHANNEL_ID if CHANNEL_ID else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n"
        f"<b>ADMIN_ID:</b> {ADMIN_ID if ADMIN_ID else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n"
        f"<b>ARTICLE_URL:</b> {ARTICLE_URL}"
    )

# ==== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====
async def main():
    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
