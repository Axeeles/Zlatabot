import asyncio
import os
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Environment Variables)
load_dotenv()

TOKEN = os.getenv("TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ARTICLE_URL = os.getenv("ARTICLE_URL")

if not TOKEN or not CHANNEL_ID or not ARTICLE_URL:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TOKEN, CHANNEL_ID –∏–ª–∏ ARTICLE_URL.")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("users.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS reminders (
        user_id INTEGER PRIMARY KEY,
        last_sent TIMESTAMP,
        sent_count INTEGER DEFAULT 0
    )
""")
conn.commit()

# –ö–Ω–æ–ø–∫–∏
continue_button = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="check_subscription")]]
)

article_button = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–°—Ç–∞—Ç—å—è", url=ARTICLE_URL)]]
)

async def is_subscribed(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    caption = (
        "–ü—Ä–∏–≤–µ—Ç! –°—Ç–∞—Ç—å—è —É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è! –ë–æ—Ç –≤—ã—Å—ã–ª–∞–µ—Ç –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ, "
        "–ø–æ—ç—Ç–æ–º—É –∂–¥—É —Ç–æ–ª—å–∫–æ —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—Éüí°\n\n"
        "—Å –ª—é–±–æ–≤—å—é, kammmil üíã"
    )
    await message.answer_photo(
        photo=types.FSInputFile("zlatapic.jpg"),
        caption=caption,
        reply_markup=continue_button
    )

    if await is_subscribed(message.from_user.id):
        await send_article(message.from_user.id)

@dp.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription(callback: types.CallbackQuery):
    if await is_subscribed(callback.from_user.id):
        await send_article(callback.from_user.id)
    else:
        await callback.message.answer("–ó–∞–π—á–∏–∫, –Ω–µ –≤–∏–∂—É —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–æ—á–∫–∏ üêá")

async def send_article(user_id: int):
    await bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –±–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–¥–ø–∏—Å–∫—Éü§ç")
    await bot.send_photo(
        user_id,
        photo=types.FSInputFile("zlatapic1.jpg"),
        reply_markup=article_button
    )

    # –ó–∞–ø–∏—Å—å –≤ –ë–î –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    cursor.execute(
        "INSERT OR REPLACE INTO reminders (user_id, last_sent, sent_count) VALUES (?, ?, ?)",
        (user_id, datetime.now().isoformat(), 0)
    )
    conn.commit()

async def reminders():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    while True:
        await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        now = datetime.now()
        cursor.execute("SELECT user_id, last_sent, sent_count FROM reminders")
        for user_id, last_sent, sent_count in cursor.fetchall():
            if sent_count >= 3:
                continue
            last_time = datetime.fromisoformat(last_sent)
            delay = timedelta(days=3) if sent_count > 0 else timedelta(minutes=15)
            if now - last_time >= delay:
                try:
                    await bot.send_message(user_id, "–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å—Ç–∞—Ç—å—é üìñ")
                    cursor.execute(
                        "UPDATE reminders SET last_sent = ?, sent_count = sent_count + 1 WHERE user_id = ?",
                        (now.isoformat(), user_id)
                    )
                    conn.commit()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def main():
    asyncio.create_task(reminders())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())